===========================
AVANCEMENT NGINX PHP-FPM
===========================

Le but est d'avoir un serveur de fichiers, et d'utiliser la page de connexion (créée par les dev').

Installer ubuntu Server : 12.04.3 LTS 		
git clone https://github.com/openstack-dev/devstack.git
cd devstack/
./stack.sh

puis entrer le mot de passe 50x (ici : toto)
puis ouvrir le fichier localrc et mettre :
--------------------------
DATABASE_PASSWORD=toto
RABBIT_PASSWORD=toto
SERVICE_TOKEN=toto
SERVICE_PASSWORD=toto
ADMIN_PASSWORD=toto
##Neutron
disable_service n-net
enable_service q-svc
enable_service q-agt
enable_service q-dhcp
enable_service q-l3
enable_service q-lbaas
enable_service q-meta
disable_service tempest
enable_service neutron
##Heat
enable_service heat
enable_service h-api
enable_service h-api-cfn
enable_service h-api-cw
enable_service h-eng
##Swift
enable_service swift
SWIFT_REPLICAS=1
SWIFT_HASH=toto
--------------------------

Une fois ce fichier modifié on lance le fichier rejoin-stack.sh et cela lance DEVSTACK =)

-------------------------
Horizon is now available at http://192.168.5.5/
Keystone is serving at http://192.168.5.5:5000/v2.0/
Examples on using novaclient command line is in exercise.sh
The default users are: admin and demo
The password: toto
This is your host ip: 192.168.5.5
stack.sh completed in 299 seconds.
------------------------

Sur le navigateur, vider le cache et s'assurer d'autoriser les cookies, puis se rendre à l'adresse : http://192.168.5.5/
Login : admin
Password : toto



Créer une instance -> sur le dashboard : Onglet PROJECT : INSTANCES : Launch Instance
|| -----> Zone de disponibilité : nova
-----> Nom de l'instance : instance_1
-----> Type d'instance : m1.nano (taille de l'instance)
-----> Nombre d'instance : 1 (A voir comment cela interagi avec le nom sur plusieurs nombre)
-----> Source de l'instance de démarrage : Démarrer depuis une image
-----> Nom de l'image : Choisir un iso

Changer d'onglet : PROJET / Accès et sécurité / IP flottantes
|| -----> Allouet une adresse IP au Projet
-----> Associer à une instance (raccrocher une IP pour le SSH notamment)
PROJET / Accès et sécurité / Paires de Clés
-----> Créer une paire de Clés

RAJOUTER UN ISO (ubuntu-saucy-server-amd64 par exemple) :
|| PROJET / Images & Snapshots / Create Image
-----> Name : server-saucy
-----> Description : x64
-----> Image Source : Image File
-----> Browse : le fichier iso
-----> Format : ISO
-----> vide DISK et RAM


=========================
=========================
CRÉER UN SERVEUR NGINX
=========================
=========================

-------------------
Une première idée : (tuée dans l'oeuf dans l'install d'ubuntu à partir de 0 sera trop long)
-------------------
	Avec la création de l'instance, on utilise la technologie du KickStart, sur Ubuntu il s'agit du logiciel Preseed (car ks est fait pour RedHat).
	Ainsi on déploierait un fichier du type anaconda.ks-cfg avec le paramètre puppet pour appeler la compilation en local. Cette dernière dispose de Nginx et de Php-fpm.
	Autrement il y a cloud init

------------------
Une seconde idée :
------------------
	Modifier le template "ubuntu precision" qui permet d'utiliser une ubuntu déjà prête. Se servir d'un script qui sera déployé à la création de l'instance.





Ce sera cette dernière idée qui sera retenue.
Quelques tests sont à faire quant à l'installation d'NGINX, de PHP-FPM et de l'automatiser via Puppet en mode STANDALONE.


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
- - - - - - - - - - - - - - EN SOMME CELA REVIENT À - - - - - - - - - - - - - - - -
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


----------------------------------------------------------------------------------
----------------------------------------------------------------------------------
LISTING DES COMMANDES A LANCER AVANT LA SAUVEGARDE D'UBUNTU PRECISE
----------------------------------------------------------------------------------
----------------------------------------------------------------------------------
#!/bin/bash
echo "alias vi=vim" >> ~/.bashrc
source ~/.bashrc
apt-get update -y
apt-get install puppet-common wget -y
puppet module install jfryman/nginx --version 0.0.7
puppet module install Slashbunny/phpfpm
touch /etc/puppet/manifests/site.pp
touch /etc/puppet/manifests/node.pp
cat >> /etc/puppet/manifests/site.pp << EOF
import 'node.pp'
import 'nginx'
import 'apt'
import 'stdlib'
import 'phpfpm'
EOF
cat >> /etc/puppet/manifests/node.pp << EOF
include nginx
include apt
include stdlib
include phpfpm
EOF
puppet apply /etc/puppet/manifests/site.pp
cp -r /etc/nginx /etc/nginx-ori
service nginx configtest
service nginx restart
mkdir /var/www
echo '<?php phpinfo(); ?>' > /var/www/index.php
chown www-data. /var/www/index.php
chmod 700 /var/www/index.php
cp /etc/nginx/conf.d/default.conf /etc/nginx/conf.d/default.conf-ori
rm /etc/nginx/conf.d/default.conf
cat >> /etc/nginx/conf.d/default.conf << EOF
server {
        listen 80;
        root /var/www;
        server_name localhost;
        location / {
                index index.php index.html;
        }

        ### PHP5-FPM
        location ~ \.php$ {
                # fastcgi_pass 127.0.0.1:9000;
		try_files $uri =404;
		fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
		fastcgi_pass unix:/var/run/php5-fpm.sock; 
                include /etc/nginx/fastcgi_params;
                fastcgi_index index.php;
        }

        ### NO LOG 404 FOR FAVICON
        location = /favicon.ico {
                access_log off;
                return 204;
        }

        ### EXPIRE STATIC HEAD FILES (CACHING)
        location ~* ^.+.(jpg|jpeg|gif|css|png|js|xml)$ {
                expires 30d;
        }

}
EOF
ln -s /etc/nginx/sites-available/monsite /etc/nginx/sites-enabled/
service nginx restart





À CE STADE NOUS AVONS UN FICHIER PHP (/var/www/index.php) DE TEST QUI FONCTIONNE.

Y'A PLUS QU'A TESTER SUR LE SERVEUR EN PRODUCTION.
